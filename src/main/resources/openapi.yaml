openapi: 3.0.3
info:
  title: Products Prices - OpenAPI 3.0
  description: |-
    Simple Rest API of pridcut prices data.

  contact:
    email: almendroslm@gmail.com
  version: 1.0.11
servers:
  - url: localhost/8080/api/v1
tags:
  - name: prices
    description: Final prices
paths:
  /prices:
    get:
      tags:
        - prices
      summary: Finds Prices by date, productId, brandID
      operationId: findPricesByQuery
      parameters:
        - name: date
          in: query
          description: Date that need to be considered for filter
          required: true
          schema:
            type: string
        - name: productId
          in: query
          description: productId that need to be considered for filter
          required: true
          schema:
            type: integer
        - name: brandID
          in: query
          description: brandID that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceDTO'
        '400':
          description: Invalid query param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: path not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - prices
      summary: Save a new price entry
      operationId: savePrice
      requestBody:
        description: Price data to save
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceDTO'
      responses:
        '201':
          description: Successfully created price
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceDTO'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /prices/all:
    get:
      tags:
        - prices
      summary: Fetches all prices
      operationId: findAllPrices
      responses:
        '200':
          description: Successfully retrieved all prices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PriceDTO'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
    SuccessResponse:
      type: object
      properties:
        productId:
          type: integer
          format: int64
          example: 35455
        brandId:
          type: integer
          format: int64
          example: 1
        priceList:
          type: integer
          format: int64
          example: 4
        startDate:
          type: string
          example: 2020-06-15-16.00.00
        endDate:
          type: string
          example: 2020-12-31-23.59.59
        price:
          type: number
          format: float
          example: 38.95
    PriceDTO:
      type: object
      required:
        - productId
        - brandId
        - priceList
        - startDate
        - endDate
        - price
        - priority
        - currency
      properties:
        productId:
          type: integer
          format: int64
          description: "Product ID is mandatory"
          example: 35455
        brandId:
          type: integer
          format: int64
          description: "Brand ID is mandatory"
          example: 1
        priceList:
          type: integer
          format: int64
          description: "Price list ID is mandatory"
          example: 4
        startDate:
          type: string
          format: date-time
          description: "Start date in the format yyyy-MM-dd-HH.mm.ss"
          example: "2020-06-15-16.00.00"
        endDate:
          type: string
          format: date-time
          description: "End date in the format yyyy-MM-dd-HH.mm.ss"
          example: "2020-12-31-23.59.59"
        price:
          type: number
          format: float
          minimum: 0
          description: "Price is mandatory and must be a positive number"
          example: 38.95
        priority:
          type: integer
          description: "Priority is mandatory"
          example: 1
        currency:
          type: string
          description: "Currency is mandatory"
          example: "USD"